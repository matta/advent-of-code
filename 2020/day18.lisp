;;
;; Day 18 of Advent of Code 2020, in Common Lisp.  This solves Part One.
;; See https://adventofcode.com/2020/day/18 for the problem statement.
;;
;; I'm using only standard Common Lisp functions; no external packages.
;;

(defpackage :day18 (:use #:common-lisp))
(in-package :day18)

(defparameter *example-input*
  "2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")

(defparameter *input*
  "9 + (8 + 3 + (4 + 6) + 7 * 7)
4 * 3 + 8 + (2 * 7 + 8 * 8 * 4)
7 + 2 + 4 + 5 + 2
((9 + 6 * 4 * 4 * 7 * 5) + 3 * 5 * 7 * 2) * 9 + 9 * (3 * (8 * 2 * 9 * 2 * 5 + 8) + (7 * 2 * 7) * 2)
7 * (9 + 5 * (5 + 5 * 6) + (7 + 2 + 4 + 2)) + 9
6 + 5 * 3 * (3 + (3 + 6 + 4) * 7 + 6 + (7 * 6) * 2) + 5
(5 + (3 * 2 * 7 + 7) + (7 * 5) + 2) * 3 + 3 * 5
5 + (6 * 7 * 6 * 7 + (2 * 7 * 2 * 9 * 6 * 2) * (8 * 5 * 7 * 2 + 6)) + (9 * 8 + 6 + (7 + 8 + 2 + 3 * 8 * 8) + 5)
5 * 3 * 2 * 8 + 8
5 * ((3 * 8) + 4 + 4) + 8 + 9
4 + (7 * (4 + 2 + 5 * 5 * 2 + 3) + 6 * 3)
(2 + 3 + 7 * 6 + 6 + 5) * 5 * 3 + (2 * 3 * 8 * 8) + 8 * (8 * 5)
9 + ((8 * 9 * 2) * 7 + 9 * 9)
3 * (2 + 2) + 3
4 + (9 * 7) + 9 * 2
4 * 3 * 2 + (7 + 8 + 3 * 5 * (7 * 8 * 3 + 4 + 5 + 4) * 6) * 3 * 5
7 * 7 * 5 + 8 + 5
(5 * 7 * 5 * (6 * 3)) + 4 * 9 * 4
5 * 7 * 8 * (9 + 6 * (4 * 2 + 8) + 5)
(5 * 8) * (2 * 6 * 2 + 3 + 8 * 8)
(5 + 2 + 9 * 9 + 7 * 4) + 6 * 8 + 2
5 + 3 + 2 * 7 * 4
2 + (4 * 7 + 3 * 9 + (2 * 2)) * (5 * 2 * 6)
6 + 2 + 5 * 5 * 5 * ((3 + 9 * 3 + 4 * 5 + 5) * 4 + 2 * 3 + 3 + 3)
4 * 5 + ((3 * 8 * 3 + 7 + 8 * 9) * 9 + 9 * 6 + 6 + 9)
(3 * (6 * 4) + 9) * ((6 * 2 * 5 + 8 * 5 + 7) + 7 + 8 * 6)
5 * ((7 + 5) * 2 + (2 + 4) * 2 * 2)
(2 + 6 + 2) * (9 * 9) * (8 + 9 + 7 * (7 * 8 * 6)) * 8 + 7 * 2
8 + (7 * (2 + 8) * 7 + 3 * 9 * 3) * 9 * 2
4 * 8 * 2 + (4 + 7 + (6 + 9)) + 7
3 * 5 * 2 * (7 * 2 * (9 + 4 + 9 + 2 + 2 * 2) * 5)
(5 * 5 * 4 + 8) + 6 + ((5 + 5 + 2) + (5 + 6 + 2 * 4) * 2 * 9 * 4) + 7 + 4 * (6 + (6 * 6 + 7 * 3 + 5 * 3) * (6 + 6 * 9) * (3 * 7 + 8 + 2 * 5) + 4 + 7)
4 * 6 * (9 + 7 + 6 * 3) + 4
(2 + 6 * 7 + 5 * 9 + 4) + (3 + 4 + (3 * 3 * 6 * 2) * (9 * 3 * 9 + 7 + 9 + 2) * 9)
(4 + 8 * 6) * 9 * 9 + 7 * 6 * 4
5 + 9 * 6 * (7 + 8 + (8 * 9 + 3) * 3 + 3) * 2
3 * 3 * 9 + 5 * 9 + 4
(9 * (4 * 4 + 8 * 9 + 2)) + 7 + 9
2 * 6 * (7 + 2) * ((6 * 6 + 4 + 4 * 8) + (9 * 2) * 7 * 4 + 7 + 7) + 6 + 4
(3 + 9 * 7 + 2) + 9 * (4 * 8 * 3 * 3 + 8) + 6
(3 * 7 + 4 * 5) * 4
2 * (9 * 6) + 4 * 8 + ((6 * 2 + 6 * 3 + 8) + 6 + (3 + 5 * 9 * 4 + 8 * 8) * 3)
(7 + 9) + 2
((5 + 9 + 6 * 5 + 3 + 2) + (5 + 8 + 2 * 3 + 7) * (8 * 4 * 9 + 3) + 9) + 2 + 4
3 * 5
(4 * 5 * 3 * 9 * 6) + (4 * 2 * 7) * 6 + 3 * 7 * 8
8 + 9 * 8 + 4 + (3 * (5 + 7 + 3 * 2 * 4) + 7)
8 + (4 * 2 * 2 * 9 + (3 + 5 * 7 + 6))
8 * 9 + 5 * (5 * 8) + 4 + 3
9 + ((9 + 8 + 4) + (8 * 5 + 8 * 3 + 2) * 9) * ((6 * 2 * 5 + 8) + 5 + 9) + 5
3 * 2 + 8 * 7 + 3 * 2
(8 + 8 * 7) * 9 + (8 * 2 * 7 * (3 + 6 + 6 + 4 + 3) * 6 + 6)
5 * 8 + 4 * (9 * 8 + (5 * 6 + 5 + 5 + 4 * 6) * 9 + (9 * 6)) + (9 + (3 + 9 + 9))
3 * 6 * (2 * (5 + 2) + 9)
3 * 4 * 7 * (6 * (7 + 6) * 5 * 5 * (8 + 2 + 6)) + 4
5 * 4 + (3 * 9 * 6 * 2 * 5 * 2)
(2 * 2 + 6 + 8) * 5 + 3
7 + 5 + 5 * (2 + 3 + 5) * (3 + (5 + 9 + 8 + 2 + 4)) * (4 * 8)
((2 * 7 * 6 + 4 * 4 + 4) + (7 + 6) + (5 + 6 + 6 + 6) + (7 + 6 + 6) * (4 + 4 * 8 + 2 * 9) + 2) * 7 + 5 * ((7 * 3 + 6 * 2) + 4) * 3
4 * ((7 + 4 * 2 * 9 + 5 + 6) + 3) * 5 + (5 * (4 * 6 * 6) + 2 * 2 + 9) + 3
((5 + 3) * 6) + 9 * 3 + (9 + 4 + (8 + 5 + 8 * 6) + 4 * 5) + 2
5 + 5 * (8 + 9) + ((8 + 9 * 5 + 6 + 4 * 7) + 5)
6 * 8 + ((8 + 7 * 4) * 4 + 5 * 2 + 8) * 7
7 * 6 + ((4 + 3 + 3) * 5 * 5 + (9 + 9 * 8 + 2 + 2 * 8) + 3 * 4) * (8 + 6 + 8 + 2 + (5 + 9 * 5 * 5)) + 5 * 9
3 + 9 + (9 + 9 + 6 + (6 * 7 * 6) + 6) * (3 + 3 + 3 + 6) + 2 + 6
(8 * 2 * 6 * 9) + (9 * 6) * 2 * 5
(9 + 7 + 8) + 6 * (4 * 8 * 5 + 4 * (3 + 8 + 6)) + 7
3 * (5 * 6 + 5 * 8) + 9 + 6 + 5 * 5
(6 + 4 * 7 + 7 * (2 * 3 * 8 + 5 + 4 + 4)) * 4 + 6 + 4
((2 * 2 + 7 + 5) + (3 + 6) + 6) * 9
3 + 7 + 6 * (8 * 5 * 8) + 2 + 4
7 + 8 * 5 + 9 * (4 * (4 * 6 * 8 * 5) + 6) + 9
4 + 7 + 6 * 3 + (9 * 3 + (2 + 6 * 6 * 3 * 9 * 7) + (2 * 3 + 6) + 8 + (6 * 2)) + (5 + 4 * 4)
7 + 6 + (9 + (8 + 3 + 9) + 4 * 3 * 4) + (9 + (2 + 4 * 5 + 5 * 8 + 2) * 8)
5 + 8 * (3 * 4 + 6 + 5)
7 * ((5 + 3 * 2 + 5) * (9 * 2 + 2 * 7 + 7 * 6) * (2 + 7 + 2 * 9)) * 8 * 7 * 7 + 2
5 + 8 * 4 + (4 * 9 + 5 + 4 + 8 * (6 * 9 + 9 * 5 + 9))
9 * 4 * (6 + (9 + 3 * 7 * 3 * 3 + 8))
3 + 3 * (9 + 3 * 5 + (9 + 9 * 2))
(7 + 8 * 8 * 9 + 5) * 9 * 3 + 6
2 + (7 * 7 * 6 + 2 * 6 * 4) * (3 + 6 * 7 * 5 + 4 + 3)
(7 + 8) + 7 * 5 + 8
5 * 5 * 4 + 4 * (6 + 2 * 9) + 6
5 * 2
2 * 3 * 3 * 8 + (4 * 5 + (6 + 5 * 3 * 6 + 2)) + 8
((7 + 5 * 8) * 5 * 9 * 2 + (4 + 9 * 4 + 8 + 3) + 3) + (5 * (4 * 6) * 9 * 8) * 8 * ((6 + 2) * 5 * 6) + 5 + 6
7 * 7 * ((8 + 2 + 5) + (5 * 8 * 8 * 3 + 8) + 9 * 3 + 4) * 2
9 + (8 * 8 * (2 * 6 * 5 * 9 + 3))
((5 * 8 + 8 * 6 + 2 * 2) * 7 * 8 * 9 * (3 * 6) * 6) + 5 + ((9 * 5 + 6) * 6 * 3 * 5 * 2)
6 * ((3 * 2) * (6 * 5 * 6 * 3 + 2 + 8) * 2 + 2 + 2) * 2 * 9
7 + 4 * 9
3 * ((6 * 6) + (8 * 5 * 8 * 9 + 9) + (8 * 6) * (3 + 3 + 7 * 5 * 2 * 2) * (4 * 5 + 3))
(3 * 5) + 5 * 3 + 2 * 5
3 + (3 * 3 * (5 + 8 * 9 * 8 + 5) + 4 * 6 + 7) * 8
2 * 3 + 5 + 5 * (8 * 4 + 7)
9 + (3 + 2 * (3 + 7 * 4 + 8 + 7 + 5) + 4 + 3 * 9) + (2 + (2 + 5 * 2 + 3 * 8 + 3) + 8) + 7 * 7
7 * 8 * 2 + 3
((2 * 2 * 5 + 6 + 2 + 9) * 3 + 8 + 9 + 4 * 7) + 5 + 6 + 8
(6 * 8 + (2 + 9 + 8) + 3 + 7) + ((4 * 6 * 4) * 5 + 8) + 6 * 2 + (2 + (4 + 8 * 6) + 6 * 5 + 7) + 7
3 * 3 + 6 + (8 * 9 * 5 * 4 * 8 * 2) * 8 * 5
(7 + 2 + (3 * 2 * 8)) + 5 * (6 + (7 * 7 * 6 + 2 * 9 + 9) + 4) + 2 * 3 * ((6 * 6 * 7 + 2 + 8) + 7 + (4 * 5) * 2)
(9 * 8 + 6 * 4) * 3 * 5 * (9 + 3) * 7
(4 * 2) + (3 * 4) + (3 + (5 * 7 + 7 + 2 * 9 + 5) * (8 + 5 * 4)) + 5
(5 * (5 + 9 + 6 * 5) + 2 * (2 + 6 + 4 * 7)) + 3 + 7 + 9 * 3
(3 * 7 + (9 + 4 + 2 + 8 * 8 + 3)) + 2 * (3 * 4 + 5 * 4 + 7) * 9 + 5 * 3
((8 + 7 + 6 + 5 * 9) * (3 * 3 * 2 * 2 + 8) * (5 + 7 * 7) + (6 + 8 * 3 + 2 + 4) * 4 * 7) + ((8 * 6) * 2)
(3 + 5) * (3 + 7 * 4 + 3 * 6 * (7 * 3)) * 7 + 3
((4 + 5 + 3 * 7 + 6 * 3) + 4 + 9) + 5 * 9 * 8 * 4 * 8
5 + (8 * 3 * 4) + 9 * 8 + 7
2 * (6 * 6) + (9 + 9 * 6 * 5 * 6 * 4) + 6 * (4 + 7) * (5 * 8 + 3 + 7 * 9 + 7)
(7 * 2 + (7 + 6 + 4 * 4) * (2 * 9 * 6 + 8 + 7 + 7) + (8 + 3 * 2 + 5 * 6 + 6)) * 4 + 5 * ((2 + 2 * 2) * (3 * 9 * 9 + 7 + 8) + (6 * 3 * 8 * 8) + (5 + 4 + 4 + 3)) + 5
6 + (5 * (9 * 8 * 6) + 4) * 5 * 2
7 + (7 + 2 * 5 + (7 * 5 + 3))
2 + 8 * 7 + 9 * 2 + 2
9 + 8 * ((3 * 5 + 5) * 6 * (8 * 9 + 5 * 6) * 9 * 5) + 2 + 7
5 * 9 * (4 + (4 + 6 * 4 * 3 * 7) + 9) + 8 + 7
6 * 7 + 9 + 7 * 2 + (4 + 6 + (4 + 6 + 4 + 3 + 6 + 4) + (2 * 9 * 5) + 4)
5 * 2 + 4 * 7 + 8 * (6 + 5 * (6 * 3 + 2 * 7 + 8 * 9) + 4 * 3)
3 * (5 + (8 * 6 * 7 + 3 * 5) + (3 + 7 + 7 + 4)) + 5 + 6
9 * 5 + 6 * (3 + 8) * 7 + (7 + 2 * 5 * 8 * 7)
(9 + 2) * (3 + 4 * (4 * 4 + 7 + 8)) * 4 * 3 + (4 + 6 + 4 * 4 + (4 + 3))
8 + 6 + (4 + 5) * 2 + 9
(5 * 7) * 8 + (7 * (8 * 6) * 6 + 7 * (8 + 7 * 5 * 7 * 3 + 7))
(3 + 5 * 5 * (2 * 4 * 4) * 9) * ((6 * 8 + 2) * 4 * 8 * 7 + 4) * 3 * (5 * 5 * 9 * 8 + 8) + 5
6 + (8 + 9 + 7 + (7 * 5)) + 7 + ((4 * 7 * 9 * 5 + 4) * 6 * 6 + 4 * 4) * 5
(3 + 7 * 4) + 3 + 9 * 7
9 + 3 * 9 * (3 + 2 + 5) * ((7 * 9 * 8 + 7 * 6 * 7) + 6) + 5
(9 + 9 + 8 * 8 * 8) + 5 * 2 + (2 + 4 + 3 + 7 + 5) * 2
(5 * 7) * 5 + (5 * 7 + 9 * (7 * 5 * 8 + 5 * 8 + 4) * 6 * 3)
(5 + (4 * 3 + 4 * 9 * 8 + 2) * 9 * 2 + 9 * 4) * 6 * 4 * 2
((2 * 7 + 5 + 6) + 8 + 9 * 7 * (4 + 6 * 7 * 3)) * 5 + 3 * 5 + 4 + ((6 + 8 + 2) * 4 + 4 * 8 * 9 * 8)
5 + 8 * 3 + 4 + 4 * ((9 * 6 + 7) * 5 * 3 + 6 + 6)
3 + ((5 * 2 + 7 * 5 * 4) * 6 * 6 * 9 + 6) + 6 * 8 + 3 + 6
(3 + (3 * 3 + 5 * 9 + 2) * (4 * 2) * 4 + 3) + 2 * ((6 + 2 + 4 + 3) * 5 + 3 * 8)
7 + 5 + 4 + 9 * 3 * 7
5 * ((6 + 5) * 4 * (5 * 4 + 4 + 8 + 5) * 3) + 3
(2 + 2) * 8 + 9
9 + 6 + 4 * 2 * (5 * 7 * 3 + (8 + 2 * 4 + 6 * 8 * 9))
4 * 3 + 2 + (8 * (7 * 8 * 5) + (4 * 5 * 2 + 9 + 2) + 5)
8 * 8 * 2 + (2 * 6 * (7 + 2))
4 + ((5 * 2 * 2 * 9 * 9) + 7 * 2 + 8) * 9 + 8
6 + (4 * 5 + 8 + 8 * 9 * 5) * ((3 + 8 * 5 + 5 + 3 + 9) + 6 + (8 * 6 * 8 * 9) * (5 + 2 * 5)) + (5 + 5 + 9 * 3 * (2 * 3 + 9 * 5 + 9) * 6)
7 * 9 * (5 * (6 * 5 * 8 * 4 + 8) * (2 + 2 + 9 * 3) + 5 + 6 + 4) * 9 + 6
3 + 9 + (5 * 6 * 4 * (4 + 8)) * 9 * (8 + 4 * 7 + 8 * 4) + 4
8 + 2 + (3 + (6 * 2 + 5 + 8) + 5 + 2)
6 + 4 * (4 + 6 + 3 * (4 * 3) * 2)
9 + 2 * ((5 + 5 + 5) + 2 + (2 * 4 * 9 + 2)) + (5 * 2 + 7 * 7 + 9) + 7
((4 + 9 + 8 * 3) * 7 * 2 * 6 * 8) * 2 * 5
3 + (9 * 3 + 9) + 2
2 + 5 * ((2 + 6 * 2 + 3 * 4 * 3) * 2 * 7 * 5) * 4 + 8
((4 * 6 * 7) + 3 * 9 * 2 + (6 * 2 * 9) + 5) * 2 + (4 * (6 + 2) + 5 + 5 + (3 * 8 + 2 + 9 * 7 * 7)) + 8
9 + (5 * (2 + 8 + 8 + 4 * 7 + 9)) + 7 * 8
(4 * (2 + 3 * 2 * 2 * 3) + 9 + 9 * 7 * 3) * 3 + 5 * 9
((2 + 6 * 3) + 3 + 4 * 4 + 5) * 3 * (8 + 9 * 8 * 2) * 4
6 * (4 + 2 * 9 + (9 * 6 + 4)) * 3 + 5 + 8
9 * ((9 * 2 * 4) * 8 + (3 + 6 * 7 * 9 * 8 * 3)) + 8 * 6
5 * 4 + 6 + ((5 + 8 * 5 + 3 + 7) * 4) * 8 + 8
(3 * 8 + 8 + (7 * 9) + 6 * 8) + 5 + 2 + (9 + 4 * 3 * 8 * 9 + 8) * 2
8 * ((7 * 7 + 6) * 5 * 9 + 9) + 6
((5 + 7 + 9) + 4) + 2 + ((2 + 5 * 6 * 8 + 2) * (3 + 3 * 4) + 5 * (4 + 6 + 9 * 6 + 4 * 3) + 6) + 9
8 * (3 + 3 * 3 * (2 + 5 + 9)) + 7 + 5 + 8 * 8
(2 * 4 * 4 * 4 + 7 * 2) * 6 * 9
4 * 7 + ((5 * 4) * 3 + 6 + 3 * 9)
2 * 3 * 3 * 9 + 8 * ((7 + 7 + 9) * 6)
2 * ((2 * 6 + 5 * 9 * 9 * 8) + 2 + 4) + 7 + 2
2 + 4 + 7
2 * 9 + 6 * 4
7 * 8 + 7 + 4 + ((9 + 3 * 5 + 6 * 6) * 9 + (2 + 8 * 5 + 7 + 6 + 6) * 9 + 5 * 2)
2 * 5 + 4 + (4 * 6) + (7 + 5 * 3)
((8 + 8 + 6 * 5 + 9 + 3) * 5 * (6 * 5 + 7 * 6 + 5) + 7) + 8 + 4 * 7 * 3 + 7
(8 * 7 + 4 + 9 + 2 * 9) * ((7 * 2 + 3 * 7 + 4 * 5) + 9) * 7 * 4 + 4 + 9
(8 + 3 + 4 + 3 + 7) + ((4 * 6) * (3 * 2 + 6) + 6) * 9 * 5 + 3
9 * 8 + (5 + 3 + 4 * 8 + 5) + 3 * 9
2 + (2 * 2 + (4 + 8 * 4 + 9 * 5) * (6 + 2 * 9 * 6 + 4 + 3) + (3 * 6 + 6 * 5 * 2 * 9) * 3)
(6 * 9 * 4) + (4 + (6 + 3) + 2 + 7 * 2)
(2 * 5 + 7) + (4 * (8 * 9) * 7) * 6 * 5
9 * (9 + (4 * 5) * 7 * 7 + 3) + 8
6 * ((6 * 3) + (4 * 6 * 4) + 4 * 3 + (7 * 4)) + (8 * 4) * 2 + (5 * 3 + 7 + 9 * (8 * 2) * 9)
2 + (7 * (7 * 2) * 4 * 5 * 8) + 8 * 8 * 9 + 5
(7 * 2 + 6 * 4 * 3 + 7) + 9
8 + 7 + (2 * 9)
9 * 3 * 2 + (4 + 7 * 4 + 5)
(5 + (7 + 3 * 8) * (5 * 9 * 2) * 3 + 7) + 5 + 6
2 + (7 * 7 * 7 + 2 + 5 * 8) * (4 + 3 * 5) * 3
9 + (4 + 9 + (8 + 4 * 2 + 4 + 3 + 2) * 6 + 7)
6 + (9 * 6 + 2) * (5 * 2 * 8 + 5 + (5 + 7 + 4 * 2 * 4) + 8)
2 * (8 * 2 + (5 + 4) + 2 * 9 * 9) * 6 * 3 + (8 * 2 * 4 + 8 * 4)
4 * (2 + 2 * 6 + 6 + 4)
(3 + 9 + 2 + 2 + 8 * 7) + 8 * 5 * (5 + 2 + 3 * 9 * 5) * (2 * 2 * 2 * 5)
8 * 2 * 2 * 7 + 7 + (8 * 7 + 7 + 3 + 4)
3 + 9 + (3 * 7 * 2 * (2 * 2 * 4 * 8 * 6 * 3) * 3 * 4)
3 + 7 + 8 * 5 * 2
5 + (2 * 7 * 3 * 7 + 5 * 3) * 3
3 * 4 + 8 * 7
(2 * (5 + 8 + 5 * 6) * 6) * ((5 * 7 + 5) * 2 + 3 + 2 * (3 * 5)) + 7 * 5
(9 + 4 * 7) * 8 * 7 + ((5 * 7) + 7 + 9 + 8 + 7)
5 * (8 * 4 + 9) * 5 + 7 * 3 + 7
3 + (6 * 3) * (3 * 4 * 2) + 3 * (7 * 6 + 8 * 3 * 3 + 7) * 9
(7 + 6 + 3) + 7 + 8 + 9 * ((6 + 3 + 8) * 7 + 5 * 2)
2 * 6 * 5 * 5 * ((9 + 5) + 8 * (8 + 6 * 4 * 4 * 8 * 7) * 2 + 9 + 2)
4 + 3 + 7 * (6 * 2)
(5 * (2 * 6 * 6) + 9 + 6 + 5) * 5
((3 + 6 + 2 * 4 + 9) * (4 * 7 * 3) + 2 + 3) * 5 * 8 * 4 * 3 + 9
(4 + 9 + (5 * 4) + 9 + 2 * 4) * 3 + 4 + 8 + (3 + 8 + 3 * 9 * 3 + (3 * 5 + 3 * 5 * 2))
2 + (8 + 9 * (2 * 9 * 8 * 5 + 9)) * 8 + 3
(9 + 4 * (6 + 9 + 9 + 8 + 4) + 6 + 6 * 4) * 4 * 5
3 + ((2 * 4 + 7 * 6 * 5 * 3) * 7) * 9 + 8
((7 + 8 + 9 * 4 * 4) + 4 * 9 * 6 + 7 * 8) + 2 + 5
7 + 7 * (7 * 9) + (8 * 3 * 6)
(8 * 3 * 2) + 3 * ((8 * 7 * 3 * 4 * 4 * 8) * 2 + 4 * 8 + 4 * 5)
9 * 3
((5 + 5 + 8 + 3 + 6) + 3) + 4
5 * 5 * 5 + (6 * 2 * 6 + (8 * 9 * 5)) * 8 * (4 + 4 + 9 * 9 + 8 * 2)
7 + ((9 + 2) + (4 + 6) + 9 + (7 * 8 + 7) + 9 + 2) + 8 * 3 + 3 + 9
4 * 3 + (7 * 3 * 2) * 5
8 + (7 + 9 + 9 * 8) * (7 * 7 * 5 + 3 * 2)
8 + 6 + (2 * 6 + 4 + 3) + 4 * 8 + 8
2 * 7 + 8 * 9 + (9 * 3 + (4 + 2 * 9 + 2 * 5 * 5) + (3 * 2 * 5 + 6) * 4)
(5 * 2 + 4 + 2 + 9 + 2) * (2 + 3) * (8 * 5 * 9 * 6)
8 + 8 * 6
((4 * 2) + 3 + 5) * 6
4 + 9 * (6 * 6 * 8 + 4 + 8 * 2) + (5 * (4 + 4 * 6) * (8 + 7 + 8))
(8 + 2 + 2 + (9 * 4 + 7 + 8) * 3 * 9) + 2 * 7
(7 * 7 + 5) + 4 + 9 * ((5 * 8 * 8 + 6 + 8 + 8) * 5 + 8 + (3 + 6 + 6 * 8 * 7) + 6 + (7 + 8 * 9 * 8 * 8)) * 8
7 + ((8 + 8) * (5 * 6 * 8 * 8 * 7 * 6) * 3 + 7) * 8 * 8 * 5 + 4
4 + 6 + ((3 * 8 + 8 + 2) * 8 + 6 * 2 * 3 * 7)
2 * (3 * 2 * 9 * (6 * 9 * 6 + 8)) * 3 * 8 + (9 * 8 + (2 * 4 * 2) + 9)
7 + (5 + 5 + (8 * 9 * 2 * 5 + 6 + 5) + 5 * 9 + 9) + 4 * 6 * (6 + 7 + 5)
6 + (8 + 6 + 5 * 7) * 8 + (2 * 8 + 3)
8 * 5 + ((6 * 6) + 6 * (4 * 8) * 2 + (3 * 4 + 7 + 3)) + ((5 + 7 * 8 * 7 + 8) * 2 * 3 + 2 * 4 + 7) + 9
7 * (5 + 5 + 7 + 2 + 6) + (6 * (8 * 8 + 4 * 4 + 3) * 8 * 4 + 4) + (3 * (9 + 6 * 4 + 2 + 4 + 2) + 9 * 3) * 7
8 + (6 + 6 * (4 + 7 + 8 * 3 * 2 + 7) * 4 * 6) + 3 + 5
5 * 6 + 3 * 9 + 6 + (6 + 9 * 8)
5 + ((3 * 2 * 5 * 8 + 3 + 7) + 8 + 9 * 4 * 3 + 5) + 5 + 9 + 9 * (5 * 5 + 5 + 6)
8 + 4 + (2 * 6) + (7 + 3 * 7 + 7 + 8) * 3
(7 * 7 + 2) + 4 * (7 + 5) + 4 + 9 * 9
3 + 5 + (8 + 4) + 5
3 + 5 * (8 + 6 * (6 + 5 + 2 + 9 * 5 * 6) + 2)
2 + ((8 + 6 * 6 * 6 + 9 * 5) + 3 + (5 + 8 + 7 + 5) + 5 + 7)
((5 * 3 * 9 + 7 + 6) + 5 * 7 * 4 * (8 * 7 + 7 + 6 * 4 + 7)) + 8
8 + 5 + 3 + (8 * 3 * 8 + 9) + (8 + 8 + 8 * (5 + 4 + 3) + 8)
9 + ((5 * 6) + 5 + (6 * 8 + 4 * 8 + 5) + 2 * 7) + 8 * ((7 * 6 * 9 + 3) * 3 * (9 * 7 + 4) * (7 * 2 * 8 + 6)) * 7
9 * 3 * (7 * 7 * 6) * 4 + 3 * (8 + 7 + 8)
((4 + 7 * 7) + (4 + 8 + 4 * 8) + 5 * 5) + 4 + (4 * 4 * 9 * 6) + 3 * 4
((3 * 3) + 7 + (3 + 4 * 3 + 5 * 7) + 9 + 8 * 4) * 6 * ((8 + 4) + 2) * 9 * 9 + 7
(4 * (3 * 6 + 7 + 6)) + 3 * (5 * (7 + 9 * 5 + 2 + 7 * 3) + 7 * 7 * 4) + 4
4 * (9 + 8 + 6 * 8)
3 * ((6 * 7 + 8 * 3 + 8 + 2) + 8 + 3 * 5) * 2 + 4 + 7 + 6
4 * 5 * (7 + 8 * 8) * 6 * 6 + 2
5 + (2 + 6 * (4 + 2 + 3 * 7 * 8)) * (6 + (2 * 6 * 6 + 8 * 6 * 2) * 7 * (4 * 4 * 3 + 7) * 4 * 6)
8 * (4 + 8 * (9 * 9 * 8 + 4 + 5 + 8) + 8 * 7 * 3) * 3 + 6
6 + 5 * (9 * 4 * 4 + 5 * 2)
7 + (3 + 5 + 9 * 5 + 2) + 9 * 2 + ((5 * 5 * 9 * 3 * 4) * 4) * ((2 * 6 * 5 + 2) + 4 * 2)
2 * 2 + 8 * ((3 * 5 * 6 + 4 + 4 + 5) + 5 * 8 + 6 + 6) * 4
4 + 7
5 + 5 + 5 * (7 + (3 * 8 * 5) + (9 * 2 * 7) * 7 + 4) + (8 * 8 + 5 + (9 + 9 + 8 * 4) + (7 + 8 + 7 * 7 + 2) + 2)
(9 * 3 * (2 + 9 + 5 * 2 + 8)) * 5 * 2 + 5
(5 * (8 * 8 + 8 + 3) * 6 * 2 * 2 + 6) + (9 * 9 + 6 * 9 + 8 + 2) + 8 + 2 + 7 + 6
3 * 3 * 6 + (7 + 2 * 9 * 5 * 7 + 3)
5 + ((3 + 2 + 3 * 8 + 5) * (9 * 8 + 8 + 5 * 5)) * (6 + 5 * 3 * 2 + (9 * 9 + 4 + 4 + 2))
8 * (7 + 6 + 8 + 8 + 6 * 9) * 6 + 2 * (7 + (4 + 8 * 3) * 3 + 3 + 8) + 4
6 + (9 + (9 * 8 + 8 * 8 + 5 * 5) + 7 + 4 * (2 + 8 * 3 * 5 * 9 + 8))
((2 * 5) + 2 * 3 + 4 + (4 + 6) * 4) + 3
8 * 9 + (4 + 2 + 9 + (2 * 2 * 7 * 6 + 3)) + 8 + (2 * 7 * 9 + 9) + 7
7 * (8 * 6 * 8 * 6 * 5 + 9) * 8 + (9 * 2 + 6 + 5 * 9) + 7
(7 * 9) * 5 * (2 * 2 + (9 + 7 + 8) * 3)
9 * (6 + 4 + 2 * 3) * 9 + 3
9 * (7 + (8 + 8)) + 3
3 * 4 + (7 * (2 * 6) + 3) * (5 * 2 * 8) + (9 + 8 * 4) + 6
2 * 2 + (8 + (7 * 7 * 4 + 4) * 4 * (2 * 6 + 8 * 3) + (6 + 6 + 7 * 9))
5 + ((7 * 2 + 2) * (2 + 3 + 6) * (7 + 3 + 8 + 7 * 9) * (2 + 5) + 7 * 6)
2 + 2 * 9 + 2 + 9 + ((6 * 9 + 6 + 8 * 7 * 6) + 8 * 8 + (5 * 4 + 3 * 7 * 8) + 4 + (8 + 7 + 7 + 6))
2 * (9 * 3 * 7 + 6) * 8 * 6 * 4
2 + ((8 * 6 + 2 * 2 + 6) + 8 * 7 * (8 * 9) * (5 * 6 * 7) * 7) + 7 * 8
5 + (7 * 8 * 8 + 9) * 6 + (2 + 3 * 7 + 7) * (8 * 7 + 9 * (5 * 2 + 6 * 9 * 4 + 9) + 2 + 6)
(2 + 4 * 9 + 4 * 9) * 4 * 6 * 9 + 8
7 + (4 * (6 + 3 * 5 + 8 + 6) + 5) * 4
4 * ((7 * 7 * 2 * 4) + 7 * 5 * (7 * 9) + 9)
3 + 7 + (7 * 4 * 3 * 5 * 9) * 4 + 5 + 5
8 + (2 + 4 * 2 * 3 + (3 * 4)) + 5 + 5 + 3 * 2
(4 * (5 * 5) + (9 + 3 * 2 + 5 + 4 * 2) + 5) + 3
(7 * 7 * (3 + 2 + 3 + 6 + 9 + 7) * 2 * 3) * (2 + 4) * 9 * (7 * 3 + 8 + 5) * 7 + 7
5 + (4 * 5 * 7) * 8 + 9
(4 * (7 + 9 + 7 + 3 + 9 + 3) * 8 * 3 * 7 + 4) * 9 + 4
8 + 7 + 9 + 9 * 8 * ((7 + 5 * 9) * 7 * (3 + 9 + 4 + 2 * 5 * 9) * (9 * 6 + 2 * 9))
5 * ((7 * 5 + 9 * 6 + 5 + 8) * 2) * 5 + 3 * 7
5 + ((8 * 6 + 5 + 2 + 8 + 8) * 8 + 6 + 2 + 5)
2 * 8 + (3 + (9 * 2 + 8 + 7 + 4 * 4)) * 6
3 + 7 * ((4 + 7 * 3 + 6) + 5) * 8 + 3 + 7
5 + 2 + 3
5 + 6 * 9 * ((6 + 4 * 7) * 2 * 5 + 9 * 8)
3 + (9 * 2) + 2 * (7 * 4 + (4 * 5 + 3 * 2) * 4 * 8 + (3 * 2 * 7 * 6 + 5 * 6)) * 8
(9 + 8 * 6 * 4 * (5 * 5)) + ((3 * 6 + 7 + 5 * 6) * 3 * (4 * 2 * 4) * 7 * (6 * 3 + 4 * 4)) * 4 + 9
6 * 2 * 9 + (3 * (8 * 8 * 5 + 7 * 4 * 6) + (6 * 4 * 6))
(7 * (5 + 2 * 4 * 7) * 7 * 8 * 6) * 5
7 + 8 * 2 * 2 + (8 * 6 + 2 * 9 + 5) * 7
8 + (5 + 2 + 4 * 7) * (8 * 7 + 6 + 6) + 4
8 * (9 + 2 + (2 + 4))
8 + ((2 + 5) + 4 * 9 + 7 * 5) * 3 * 9
6 * 8 * ((6 * 9) * 6 + 5 + 6 * 9) * 9 * 6 + 6
3 + 4 + 7 + 9 + (7 + 8 * 6 + 3) + 2
6 + 2 * 3 * (2 + 8) + 9
2 * 5 + (5 * 5 * 6 * 7 + 8 + (2 * 9 * 4)) + 2 + 4
7 * 2 + (4 * 7 + 6 + 7 * (7 + 8 * 9 + 3)) * (3 * (9 * 7 + 9) * 6 + 2 + (8 * 8 + 8 + 6) + 6)
2 + (3 * 6 + 3 * 9) + 6
6 + 7 + 6 + (6 * 2 * 8) * 5
(9 * 4 + (3 + 8 + 9) * 5 * (3 * 3 * 4 * 3)) * 9 + 7
(6 + (5 + 6) + 9 + (8 * 7 + 7)) + 2 * 8 * 8
2 + 2 * 9 + ((8 + 5 * 2 + 9 + 7 + 4) * 9 * 2 * 9) * 3
6 * ((2 + 6) * 6)
(7 + (3 * 5)) * 7 * 7 * 9 + 6 * 4
4 * (3 * 3 * (5 + 5 + 6 + 3 + 8 + 3)) + 9 + 5 + (9 * 2 * 4 + 6) + 3
2 * ((6 * 3 + 8 + 4 + 5) * (2 + 9 + 8 + 6 + 4 * 6))
(5 + 4 * 4) * 8 + 6
(7 * 3 + 7) + 4 * 4 + 9 * (9 * 3 * 2 + 2)
6 * 4 * 7 + 2 + ((4 + 8 * 4 + 2 * 5 + 9) * (9 * 6 + 8 * 6 * 7 + 2) + (7 + 4 + 2 * 3 + 3) * (2 + 5 * 3) * 3) + 8
(4 + 8 * 5 + 5 * 6) + 8 + 7 * 4 * 4 * 8
4 * (6 * 2 + (8 * 6 * 3 * 9 + 9) * 8) + 4 + 6
4 + 3 * ((3 * 6 * 2 + 3 * 7) + 2 * 6)
(4 * 6 * 4 * 5 * 6) * 5 * 6 * ((7 * 6 * 6) + (8 + 9 + 2 * 3 * 3 + 4)) * 4
((3 + 3 * 7 * 6 * 2 + 8) + 2 * (4 + 6 * 8) + 8 * 7 + 9) * 5 + 8 + 4
(6 + 5 + 6 + (4 * 6 * 8) + 7 + 8) + 8 + 7 + 7
((3 + 6 + 9 * 6 + 8) + 5 + 7) * 3 * 8
7 * 3 * 4 * 3 + 6 * (9 * 7 + (4 * 7 + 3 + 8 * 4))
3 + 9 + 6 * (5 + (7 * 3) * 2 + 7 * 9) * (5 + 2 * (4 + 9) * (4 + 3 * 2 + 4 + 3) + 9 + 7)
2 + (4 + 7 + (3 + 2)) + 8 * 6 * 6 + 2
(8 + 3 + (2 * 5 + 6 + 8) + 8) * 6
2 * ((6 + 2) + 4 + 5 + 5)
7 * (5 * (6 + 9 + 2)) + (9 + 9 + 5 * (5 + 4 + 9 * 4 * 3)) * 7 + (9 * 5 * 5 * 2 * 6 + 7)
(2 * 9 * (9 * 6) * 6) + 8 * 4
((4 * 2) * 5 * 4 + 6) * 6 + 6 + 9 * 6
3 + 6
7 + 7 + ((8 * 7 + 8) + 9 * 4 + (9 + 3 * 5)) + 3 + (7 * 4 + 4)
((6 * 7 * 3 * 6 + 3) + (6 + 8 + 4) + (7 + 9 * 3) * 4) + 3 + 6 + 5
(9 + 6) + 9 + 5 * 3 * 9 + 3
9 * ((4 * 8 + 6 * 9 + 5 * 5) * 3 + 6 + 3 * 7) * 8 + 2 * 9 * (9 + 4 * 5 * 9 * 7 * (3 + 7 * 6))
6 * 7 * 4 * 4 * 4 * (5 * 8 * 4 * 6)
2 * 8 + (3 * (8 * 7 * 3 * 5 * 8) + 5 * 6) * 5 * (2 + 8) * 7
5 + 7 + 9 * (3 * 4 * 9 * 7 * 9) + 7
2 * (8 * 8 + 4 + 3 * 6 * 5)
3 + 6 * (5 + 6 * 7 + 6 + 6 + 9) + 2 * 2
(5 * 9 * (2 + 6) * 5 + 9) * 4
(5 * 9 * (8 + 4 * 3 + 5) + 7 + 4 * 9) + (7 + 9 + (9 * 4 + 7 * 2 * 7) + (9 + 9 + 7 * 7 * 8) * 5) * (5 * (3 * 6 + 5 + 4 + 6 + 9)) * 4
4 + 6 * 4 * ((7 * 5 * 7) * 8 + 9 * 8) * 6
7 + 5 * 2 + (5 + 8 * (8 * 9)) + (5 * 2 * 4 * 5 * 5) * 9
(2 + 5 + 6 * 9 + 4 * 5) + 2 * 9 * 3 + 3 * 5
7 * 7 * 8 + 3
((8 * 6 * 7 + 9 + 4) * (8 + 7) * 5) + 3 + 6 + (2 * 8 * 4 + 2 * 6 * 8) + (6 + 4 + 3 + 5 * (4 * 9 + 2 + 7 * 2 + 7) + 4) * 8
(9 * (2 * 5) * (6 + 5 * 5 + 4) + 9) + 2 + 8 + 4 * 5
4 * 6 + (5 + 6 + (4 * 2) * 7) + 3
9 + (2 * 8 + 7 * (3 + 8)) * (5 + 3 * 2 * 2 * (4 + 7 + 6 + 3 * 5)) * 3 + 2
4 + 5 + ((6 + 9 + 2 * 9 + 6 + 6) * 5 * 6) + 5 * 8 + (9 + 4 * 8)
4 * (4 * 2 + 2 + (9 * 6 * 7 + 4 + 7) * (9 * 2 * 7)) + ((8 + 7) * (4 * 9 * 8 + 3 * 7)) * 5 + (6 + 5 + (2 * 9 * 2)) + 3
(7 * 6 + 3 + (5 + 6 * 8) + 5) + (3 * (8 * 5 * 8 * 3 * 5 + 9) * 7 * 8) + 7 * 6 * 5
9 + (5 + 3 + 2)
(5 + 8 + 9) * 2
6 * 3 + (2 * 8 * 3 * 3 * 6) * 2
5 + 4 * (8 * 6 + 9) * 4 + 9
2 * 5 * 3 + 6 + 6 + 6
(4 * 7 + 9 * 2 * 7 * 3) + 8 + 4 * ((4 + 5 + 6 * 5) * 3 * 5) * 6 * 8
2 + ((3 * 4 * 8) * 4 * (9 + 9 + 5 * 4 * 6) + 7) * 8 + (4 + 3) * (8 * 4 * 8 * 5 + 4 + 6)
7 * (8 + (9 + 2) * 5 * 9 + 5 + 3) + 4
9 * 9 + (4 + (5 + 3 + 4 * 2 * 9) + 2 * 6 * 5 * 5) + 5 + 4 + (8 + 2 + 8)
7 * 8 * ((7 + 8) + (6 * 8) + 2 + 8 * (7 + 4 + 6 + 3) + (7 * 4)) + (6 * 2 + (7 + 5 + 8 * 3 + 6) * 2) + 5
4 + ((8 + 2 + 4 + 4) + 8 + 9) * 8 + 7 + 4
5 + 6 + (2 * (6 + 9 * 2) + 2 * 5 + 5 * 6) + 9
((7 * 8 + 3 * 3 + 6) + 8) * 9 * 7 + 6
8 * 6 + 3
8 + (9 + (9 + 4 * 9) + 9 + 8 + (9 * 8 + 5) + 4) * 8
4 + (2 + (7 * 8 + 2 + 9 * 3) * 5 * 4 * (4 * 6) * 5) * 5 * 7 * 3 + 7
2 + 9 * 3 * 4
((6 + 2) + 6) + 4 * 5
5 + 9 * 9 * 9 + (8 + 9 + (7 * 2) * (7 + 3) * 6 * 6)
7 * 2 * 3 + (6 + 9 + 9)
(9 * 6 * 2 * 2 + 8) * 5 + 2
5 * (3 + 4 * 9 * 9) * (3 + 8 + (3 * 2 + 9 + 3 + 5) + 3) * (8 + 2)
5 + 2 * (4 * 6) * 2 * 2 * 2
5 + 3 * 2 * (9 + 6 * 6 + 9) * 3
")

(defun parse-expression (input)
  (with-input-from-string (in (concatenate 'string input ")"))
    (read-delimited-list #\) in)))

(defun parse-input (input)
  (with-input-from-string (in input)
    (loop for line = (read-line in nil)
          while line
          collect (parse-expression line))))

(defun forest-eval (expr)
  (cond
    ((listp expr)
     (destructuring-bind (lhs op rhs . rest) expr
       (let ((value (apply (ecase op
                             (* #'*)
                             (+ #'+))
                           (list (forest-eval lhs)
                                 (forest-eval rhs)))))
         (if (null rest)
             value
             (forest-eval (cons value rest))))))
    ((numberp expr) expr)
    (t (error "Invalid expression: ~S" expr))))

;;;; E -> T { * T }*
;;;; T -> F { + F }*
;;;; F -> num | ( E )
(defun forest2-parse (tokens)
  (labels ((peek ()
             (first tokens))

           (peek-symbol-p (symbol)
             (eq symbol (peek)))

           (consume ()
             ;; (format t "~&consuming ~S~%" (peek))
             (pop tokens))

           (non-terminal (symbol parse)
             (let ((thing (funcall parse))
                   (things (loop while (peek-symbol-p symbol)
                                 do (consume)
                                 collect (funcall parse))))
               (if (consp things)
                   (nconc (list symbol thing) things)
                   thing)))

           (expr () (non-terminal '* #'term))

           (term () (non-terminal '+ #'factor))

           (factor ()
             (cond
               ((numberp (peek)) (consume))
               ((consp (peek)) (forest2-parse (consume)))
               (t (error "unexpected token: ~S" (peek))))))
    (expr)))

(defun forest2-eval (tokens)
  (eval (forest2-parse tokens)))

(defun test ()
  (assert (equal '(26 437 12240 13632)
                 (mapcar #'forest-eval
                         (parse-input *example-input*))))

  ;; This is the Part One answer.
  (assert (equal 6923486965641
                 (reduce #'+
                         (mapcar #'forest-eval
                                 (parse-input *input*)))))

  (assert (equal '(46 1445 669060 23340)
                 (mapcar #'forest2-eval
                         (parse-input *example-input*))))

  ;; This is the Part Two answer.
  (assert (equal 70722650566361
                 (reduce #'+
                         (mapcar #'forest2-eval
                                 (parse-input *input*))))))
